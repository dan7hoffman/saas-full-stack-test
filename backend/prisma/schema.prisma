// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with complete auth fields
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  passwordHash          String
  firstName             String
  lastName              String
  role                  Role      @default(USER)

  // Email verification
  emailVerified         Boolean   @default(false)
  emailVerifiedAt       DateTime?

  // Account security
  isActive              Boolean   @default(true)
  lockedUntil           DateTime?
  failedLoginAttempts   Int       @default(0)
  lastFailedLoginAt     DateTime?

  // 2FA
  totpSecret            String?
  totpEnabled           Boolean   @default(false)
  totpBackupCodes       String[]  @default([])

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?

  // Relations
  sessions              Session[]
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  accounts              Account[]
  liabilities           Liability[]

  @@index([email])
}

// Session model (Copenhagen Book pattern)
model Session {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Session token (hashed with SHA-256)
  expiresAt         DateTime
  ipAddress         String
  userAgent         String
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Email verification and other token types
model VerificationToken {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Token (hashed with SHA-256)
  type              TokenType
  expiresAt         DateTime
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Password reset tokens
model PasswordResetToken {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Reset token (hashed with SHA-256)
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

// Financial tracking models
model Account {
  id            String   @id @default(cuid())
  userId        String

  // Core fields
  name          String   // "Chase Checking", "Vanguard 401k"
  type          AccountType
  currency      String   @default("USD")

  // Metadata
  institution   String?  // "Chase", "Vanguard", etc.
  accountNumber String?  // Last 4 digits (for reference)
  isActive      Boolean  @default(true)

  // Tracking
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balances      Balance[]

  @@index([userId])
  @@index([userId, isActive])
}

model Liability {
  id            String   @id @default(cuid())
  userId        String

  // Core fields
  name          String   // "Chase Credit Card", "Student Loan"
  type          LiabilityType
  currency      String   @default("USD")

  // Loan details (optional)
  interestRate  Decimal? @db.Decimal(5, 2)   // APR (e.g., 4.50 for 4.5%)
  minimumPayment Decimal? @db.Decimal(10, 2) // Monthly minimum
  dueDate       Int?     // Day of month (1-31)

  // Metadata
  institution   String?  // "Chase", "Nelnet", etc.
  accountNumber String?  // Last 4 digits
  isActive      Boolean  @default(true)

  // Tracking
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balances      Balance[]

  @@index([userId])
  @@index([userId, isActive])
}

model Balance {
  id          String   @id @default(cuid())

  // Polymorphic relation (points to either Account or Liability)
  accountId   String?
  liabilityId String?

  // The actual data point
  amount      Decimal  @db.Decimal(15, 2)
  date        DateTime // e.g., 2024-12-31 for Q4 2024

  // Optional
  note        String?  // "Q4 2024", "End of year", etc.

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  account     Account?    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  liability   Liability?  @relation(fields: [liabilityId], references: [id], onDelete: Cascade)

  // Constraints - one balance per account/liability per date
  @@unique([accountId, date])
  @@unique([liabilityId, date])
  @@index([date])
  @@index([accountId, date])
  @@index([liabilityId, date])
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  RETIREMENT
  PROPERTY
  VEHICLE
  CRYPTO
  OTHER
}

enum LiabilityType {
  CREDIT_CARD
  STUDENT_LOAN
  MORTGAGE
  AUTO_LOAN
  PERSONAL_LOAN
  OTHER
}
