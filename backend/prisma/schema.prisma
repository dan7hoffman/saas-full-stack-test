// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with complete auth fields
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  passwordHash          String
  firstName             String
  lastName              String
  role                  Role      @default(USER)

  // Email verification
  emailVerified         Boolean   @default(false)
  emailVerifiedAt       DateTime?

  // Account security
  isActive              Boolean   @default(true)
  lockedUntil           DateTime?
  failedLoginAttempts   Int       @default(0)
  lastFailedLoginAt     DateTime?

  // Soft delete
  deletedAt             DateTime?
  deletedBy             String?

  // 2FA
  totpSecret            String?
  totpEnabled           Boolean   @default(false)
  totpBackupCodes       String[]  @default([])

  // Metadata
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?

  // Relations
  sessions              Session[]
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  organizationMemberships OrganizationMember[]
  createdAccounts       Account[]    @relation("createdAccounts")
  createdLiabilities    Liability[]  @relation("createdLiabilities")

  @@index([email])
}

// Session model (Copenhagen Book pattern)
model Session {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Session token (hashed with SHA-256)
  expiresAt         DateTime
  ipAddress         String
  userAgent         String
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Email verification and other token types
model VerificationToken {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Token (hashed with SHA-256)
  type              TokenType
  expiresAt         DateTime
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Password reset tokens
model PasswordResetToken {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique  // Reset token (hashed with SHA-256)
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime  @default(now())

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum OrganizationRole {
  OWNER   // Can delete org, manage billing, invite/remove members
  ADMIN   // Can invite members, manage all financial data
  MEMBER  // Can create/edit accounts and balances
  VIEWER  // Read-only access
}

// Multi-tenancy models for household/family sharing
model Organization {
  id            String   @id @default(cuid())
  name          String   // "Hoffman Family", "Smith Household"

  // Plan (for future subscription tiers)
  plan          String   @default("FREE") // FREE, PRO, ENTERPRISE

  // Soft delete
  deletedAt     DateTime?
  deletedBy     String?

  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  members       OrganizationMember[]
  invitations   Invitation[]         @relation("organizationInvitations")
  accounts      Account[]
  liabilities   Liability[]

  @@index([deletedAt])
}

model OrganizationMember {
  id              String            @id @default(cuid())
  organizationId  String
  userId          String
  role            OrganizationRole  @default(MEMBER)

  // Invitation tracking
  invitedBy       String?           // User ID who invited
  invitedAt       DateTime          @default(now())
  acceptedAt      DateTime?

  // Metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
}

// Organization invitation model (for pending invitations)
model Invitation {
  id              String            @id @default(cuid())
  organizationId  String
  email           String            // Email of invited person
  role            OrganizationRole  @default(MEMBER)
  token           String            @unique // Invitation token (hashed)

  // Invitation lifecycle
  invitedBy       String            // User ID who sent invitation
  sentAt          DateTime          @default(now())
  expiresAt       DateTime          // Typically 7 days from sentAt
  acceptedAt      DateTime?         // When invitation was accepted
  revokedAt       DateTime?         // If invitation was cancelled

  // Metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  organization    Organization      @relation("organizationInvitations", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email]) // Only one active invitation per email per org
  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@index([organizationId])
}

// Financial tracking models
model Account {
  id             String   @id @default(cuid())
  organizationId String
  createdBy      String   // Track who created this account

  // Core fields
  name           String   // "Chase Checking", "Vanguard 401k"
  type           AccountType
  currency       String   @default("USD")

  // Metadata
  institution    String?  // "Chase", "Vanguard", etc.
  accountNumber  String?  // Last 4 digits (for reference)
  isActive       Boolean  @default(true)

  // Soft delete
  deletedAt      DateTime?
  deletedBy      String?

  // Tracking
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User         @relation("createdAccounts", fields: [createdBy], references: [id], onDelete: Restrict)
  balances       Balance[]

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([deletedAt])
}

model Liability {
  id             String   @id @default(cuid())
  organizationId String
  createdBy      String   // Track who created this liability

  // Core fields
  name           String   // "Chase Credit Card", "Student Loan"
  type           LiabilityType
  currency       String   @default("USD")

  // Loan details (optional)
  interestRate   Decimal? @db.Decimal(5, 2)   // APR (e.g., 4.50 for 4.5%)
  minimumPayment Decimal? @db.Decimal(10, 2) // Monthly minimum
  dueDate        Int?     // Day of month (1-31)

  // Metadata
  institution    String?  // "Chase", "Nelnet", etc.
  accountNumber  String?  // Last 4 digits
  isActive       Boolean  @default(true)

  // Soft delete
  deletedAt      DateTime?
  deletedBy      String?

  // Tracking
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User         @relation("createdLiabilities", fields: [createdBy], references: [id], onDelete: Restrict)
  balances       Balance[]

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@index([deletedAt])
}

model Balance {
  id          String   @id @default(cuid())

  // Polymorphic relation (points to either Account or Liability)
  accountId   String?
  liabilityId String?

  // The actual data point
  amount      Decimal  @db.Decimal(15, 2)
  date        DateTime // e.g., 2024-12-31 for Q4 2024

  // Optional
  note        String?  // "Q4 2024", "End of year", etc.

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  account     Account?    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  liability   Liability?  @relation(fields: [liabilityId], references: [id], onDelete: Cascade)

  // Constraints - one balance per account/liability per date
  @@unique([accountId, date])
  @@unique([liabilityId, date])
  @@index([date])
  @@index([accountId, date])
  @@index([liabilityId, date])
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  RETIREMENT
  PROPERTY
  VEHICLE
  CRYPTO
  OTHER
}

enum LiabilityType {
  CREDIT_CARD
  STUDENT_LOAN
  MORTGAGE
  AUTO_LOAN
  PERSONAL_LOAN
  OTHER
}
